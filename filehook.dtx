% \iffalse meta-comment
%<=*COPYRIGHT>
%% Copyright (C) 2011-2012 by Martin Scharrer <martin@scharrer-online.de>
%% ----------------------------------------------------------------------
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%%
%% This work has the LPPL maintenance status `maintained'.
%%
%% The Current Maintainer of this work is Martin Scharrer.
%%
%% This work consists of the files filehook.dtx and filehook.ins
%% and the derived files filehook.sty, filehook-fink.sty,
%% filehook-listings.sty, filehook-memoir.sty, filehook-scrlfile.sty
%% and pgf-filehook.sty
%%
%<=/COPYRIGHT>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{filehook.dtx}[%
%<=*DATE>
    2019/07/12
%<=/DATE>
%<=*VERSION>
    v0.5e
%<=/VERSION>
    Hooks for input files]
\documentclass{ydoc}
\GetFileInfo{filehook.dtx}
\usepackage{filehook}[\filedate]
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\makeatletter
\providecommand*\tablecaption{%
    \@tempdima=\abovecaptionskip
    \abovecaptionskip=\belowcaptionskip
    \belowcaptionskip=\@tempdima
    \caption
}
\makeatother
\listfiles
\begin{document}
  \DocInput{filehook.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{1051}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2010/04/08}{Initial version}
% \changes{v0.2}{2010/12/08}{Added support for 'memoir' class and 'scrlfile' package. Remove support for deprecated 'fink' package.}
% \changes{v0.3}{2010/12/20}{Added hooks for package and class files. Changed a warning to an error and added the 'force' option to overwrite this.}
% \changes{v0.4}{2011/01/03}{^^A
% Improved support for 'memoir' class and 'scrlfile' package.
% Added AtBeginOfEveryFile and AtEndOfEveryFile hooks.
% Changed handling of macro arguments in hook code.
% Added filename parsing code to support TeX files with and without extension.
% Added AtBeginOfEveryFile/AtEndOfEveryFile hooks.
% Fixes misspelled \string\AfterOfIncludeFile.
% Added patch for listings \lstinputlistings to avoid hooks for verbatim files.
% Added star argument for AtBeginOfClass and PackageFile.
% Worked on scrlfile and memoir compatibility.
% Readded fink compatibility code.
% Updated documentation.
% }
% \changes{v0.5}{2011/01/09}{Added PGF key interface for hooks. Added macro to clear hooks.}
% \changes{v0.5a}{2011/03/09}{Added required \string\long\space to an internal macro.}
% \changes{v0.5b}{2011/07/18}{Replaced \cs{@nameuse} for use with eTeX code to avoid the definition of non-existing hooks to \cs{relax}.}
% \changes{v0.5c}{2011/10/07}{Added fall-back code for non-eTeX compilers.}
% \changes{v0.5d}{2011/10/12}{Fix for fall-back code.}
%
% \GetFileInfo{filehook.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \author{Martin Scharrer}
% \email{martin@scharrer-online.de}
% \maketitle
%
% \begin{abstract}
% This package provides hooks for input files. Document and package authors can use these hooks to
% execute code at begin or the end of specific or all input files.
% \end{abstract}
%
%
% \section{Introduction}
% These package changes some internal \LaTeX{} macros used to load input files so that they include `hooks'.
% A hook is an (internal) macro executed at specific points. Normally it is initially empty, but can be extended using
% an user level macro. The most common hook in \LaTeX{} is the `At-Begin-Document' hook. Code can be added to this hook
% using \Macro\AtBeginDocument{<\TeX\ code>}.
%
%
% This package provides hooks for files read by the \LaTeX{} macros \Macro\input, \Macro\include and 
% \Macro\InputIfFileExists as well as (since v0.3 from 2010/12/20) for class and package files, 
% i.e. macros \Macro\documentclass, \Macro\LoadClassWithOptions and \Macro\LoadClass
% as well as \Macro\usepackage, \Macro\RequirePackageWithOptions and \Macro\RequirePackage.
% Note that \Macro\InputIfFileExists, and therefore its hooks, is used by the aforementioned macros.
% In v0.4 from 2011/03/01 special hooks where added which are executed for every read file, but will not be
% executed a second time by the internal \Macro\InputIfFileExists inside \Macro\input and \Macro\include.
%
% For all files a `AtBegin' and a `AtEnd' hook is installed. For \Macro\include files there is also a `After' hook which
% it is executed \emph{after} the page break (\Macro\clearpage) is inserted by the \Macro\include code.
% In contrast, the `AtEnd' hook is executed before the trailing page break 
% and the `AtBegin' hook is executed after the \emph{leading} page break.
% The `AtBegin' hook can be used to set macros to file specific values.
% These macros can be reset in the `AtEnd' hook to the parent file values.
% If these macros appear in the page header or footer they need to be reset `After' hook
% to ensure that the correct values are used for the last page.
%
% In addition to general hooks which are executed for all files of there type,
% file specific one can be defined which are only executed for the named file.
% The hooks for classes and packages are always specific to one file.
%
% Older versions of this package provided the file name as argument |#1| for the general hooks.
% This has been changed in v0.4 from 2011/01/03: the hook code is stored and executed without modifications,
% i.e.\ macro argument characters (|#|) are now handled like normal and don't have to be doubled.
% See section~\ref{sec:upgrade} for information how to upgrade older documents.
%
% \section{Usage}
% The below macros can be used to add material (\TeX{} code) to the related hooks.
% All `AtBegin' macros will \emph{append} the code to the hooks, but the `AtEnd' and `After' macros will \emph{prefix} the code instead.
% This ensures that two different packages adding material in `AtBegin'/`AtEnd' pairs do not overlap each other.
% Instead the later used package adds the code closer to the file content, `inside' the material added by the first package.
% Therefore it is safely possible to surround the content of a file with multiple \LaTeX{} environments using multiple `AtBegin'/`AtEnd' macro calls.
% If required inside another package a different order can be enforced by using the internal hook macros shown in the implementation section.
%
%^^A Some internal macros to draw the hook positions:
% \def\Hook#1{\textsf{Hook: #1}\MacroArgs}
%
% \def\DrawInputIfB#1{%
% \hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\InputIfFileExists:}%
%   \hbox{\fbox{\vbox{%
%     \hbox{\Hook{AtBeginOfFile}{<file name>}}%
%     #1%
%     \hbox{\Hook{AtBeginOfFiles}}%
%     \hbox{\fbox{\emph{Content}}}%
%     \vspace{2pt}%
%     \hbox{\Hook{AtEndOfFiles}}%
%     \hbox{\Hook{AtEndOfFile}{<file name>}}%
%   }}}%
% }}%
% }%
% 
% \def\DrawInputIf#1{%
% \hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\InputIfFileExists:}%
%   \hbox{\fbox{\vbox{%
%     \hbox{\Hook{AtBeginOfEveryFile}}%
%     \hbox{\Hook{AtBeginOfFile}{<file name>}}%
%     #1%
%     \hbox{\Hook{AtBeginOfFiles}}%
%     \hbox{\fbox{\emph{Content}}}%
%     \vspace{2pt}%
%     \hbox{\Hook{AtEndOfFiles}}%
%     \hbox{\Hook{AtEndOfFile}{<file name>}}%
%     \hbox{\Hook{AtEndOfEveryFile}}%
%   }}}%
% }}%
% }%
%
%
% \subsection*{Every File}
%
% \DescribeMacro{\AtBeginOfEveryFile}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfEveryFile}{<\TeX\ code>}
% Sometime certain code should be executed at the begin and end of every read file, e.g.\ pushing and popping a file stack.
% The `At...OfFiles' hooks already do a good job here. Unfortunately there is the issue with the \Macro\clearpage in \Macro\include.
% The \Macro\AtEndOfFiles is executed before it, which can cause issues with page headers and footers.
% A workaround, e.g.\ done by older versions of the \pkg{currfile} package, is to execute the code twice for include files:
% once in the |include| related hooks and once in the |OfFiles| hooks.
%
% A better solution for this problem was added in v0.4 from 2011/01/03:
% the |EveryFile| hooks will be executed exactly once for every file, independent if it is
% read using \Macro\input, \Macro\include or \Macro\InputIfFileExists.
% Special care is taken to suppress them for the \Macro\InputIfFileExists inside \Macro\input and \Macro\include.
%
% These hooks are located around the more specific hooks:
% For \Macro\input files the `Begin' hook is executed before the \Macro\AtBeginOfInputs hook and the `End' hook after
% the \Macro\AtEndOfInputs.
% Similarly, for \Macro\include files the `Begin' hook is executed before the \Macro\AtBeginOfIncludes hook and the `End' hook after
% the \Macro\AfterIncludes\relax (!).
% For files read by \Macro\InputIfFileExists\relax (e.g. also for \Macro\usepackage, etc.) they are executed before and after the
% \Macro\AtBeginOfFiles and \Macro\AtEndOfFiles hooks, respectively.
% Note that the \Macro\AtBeginOfEveryFile hook is executed before the \Macro\AtBeginOfPackageFile/\Macro\AtBeginOfClassFile hooks
% and that the \Macro\AtEndOfEveryFile hook is executed also before the hooks \Macro\AtEndOfPackageFile/\Macro\AtEndOfClassFile.
% Therefore the `Every' and `PackageFile'/`ClassFile' hooks do not nest correctly like all other hooks do.
%
%
% \subsection*{All Files}
%
% \DescribeMacro{\AtBeginOfFiles}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfFiles}{<\TeX\ code>}
% These macros add the given \marg{code} to two hooks executed for all files read using the \Macro\InputIfFileExists macro. This macro is used internally by the 
% \Macro\input, \Macro\include and \Macro\usepackage/\Macro\RequirePackage macros. Packages and classes might use it to include additional or auxiliary files.
% Authors can exclude those files from the hooks by using the following code instead:\\\hspace*{\bigskipamount}\Macro\IfFileExists{<file name>}'{\@input\@filef@und}{}'
%
% \DescribeMacro{\AtBeginOfFile}{<file name>}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfFile}{<file name>}{<\TeX\ code>}
% Like the {\Macro{...OfIncludeFile}{<file name>}{<\TeX\ code>}} macros above, just for `all' read files.
% If the \meta{file name} does not include a file extension it will be set to `|.tex|'.
%
% The `all files' hooks are closer to the file content than the \Macro\input and \Macro\include hook, i.e.\ the \Macro\AtBeginOfFiles comes \emph{after} the \Macro\AtBeginOfIncludes and
% the \Macro\AtEndOfFiles comes \emph{before} the \Macro\AtEndOfIncludes hook.
%
% The following figure shows the positions of the hooks inside the macro:\par\medskip
% \centerline{\DrawInputIf{}}
%
%
% \subsection*{Include Files}
% \DescribeMacro{\AtBeginOfIncludes}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfIncludes}{<\TeX\ code>}
% \DescribeMacro{\AfterIncludes}{<\TeX\ code>}
% As described above the `AtEnd' hook is executed before and the `After' hook is executed after the trailing \Macro\clearpage.
% Note that material which appears in the page header or footer should be updated in the `After' hook, not the `AtEnd' hook, to ensure
% that the old values are still valid for the last page.
%
% \DescribeMacro{\AtBeginOfIncludeFile}{<file name>}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfIncludeFile}{<file name>}{<\TeX\ code>}
% \DescribeMacro{\AfterIncludeFile}{<file name>}{<\TeX\ code>}
% These file-specific macros take the two arguments. The \meta{code} is only executed for the file with the given \meta{file name}
% and only if it is read using \Macro\include.
% The \meta{file name} should be identical to the name used for \Macro\include and not include the `|.tex|' extension.
% Files with a different extension are neither supported by \Macro\include nor this hooks.
%
% The following figure shows the positions of the hooks inside the macro:\par\medskip
% \centerline{\hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\include:}%
%   \hbox{\fbox{\vbox{%
%    \hbox{\Macro\clearpage~~(implicit)}%
%    \hbox{\Hook{AtBeginOfEveryFile}}%
%    \hbox{\Hook{AtBeginOfIncludeFile}{<file name>}}%
%    \hbox{\Hook{AtBeginOfIncludes}}%
%    \hbox{\fbox{\DrawInputIfB{}}}%
%    \vspace{2pt}%
%    \hbox{\Hook{AtEndOfIncludes}}%
%    \hbox{\Hook{AtEndOfIncludeFile}{<file name>}}%
%    \hbox{\Macro\clearpage~~(implicit)}%
%    \hbox{\Hook{AfterIncludes}}%
%    \hbox{\Hook{AfterIncludeFile}{<file name>}}%
%    \hbox{\Hook{AtEndOfEveryFile}}%
%   }}}%
% }}}
%
%
% \subsection*{Input Files}
%
% \DescribeMacro{\AtBeginOfInputs}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfInputs}{<\TeX\ code>}
% Like the \Macro{...OfIncludes}{code} macros above, just for file read using \Macro\input.
%
% \DescribeMacro{\AtBeginOfInputFile}{<file name>}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfInputFile}{<file name>}{<\TeX\ code>}
% Like the \Macro{...OfIncludeFile}{<file name>}{code} macros above, just for file read using \Macro\input.
% If the \meta{file name} does not include a file extension it will be set to `|.tex|'.
%
% The following figure shows the positions of the hooks inside the macro:\par\medskip
% \centerline{\hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\input:}%
%   \hbox{\fbox{\vbox{%
%    \hbox{\Hook{AtBeginOfEveryFile}}%
%    \hbox{\Hook{AtBeginOfInputFile}{<file name>}}%
%    \hbox{\Hook{AtBeginOfInputs}}%
%    \hbox{\fbox{\DrawInputIfB{}}}%
%    \vspace{2pt}%
%    \hbox{\Hook{AtEndOfInputs}}%
%    \hbox{\Hook{AtEndOfInputFile}{<file name>}}%
%    \hbox{\Hook{AtEndOfEveryFile}}%
%   }}}%
% }}}
%
%
%
% \subsection*{Package Files}
%
% \DescribeMacro{\AtBeginOfPackageFile}*{<package name>}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfPackageFile}*{<package name>}{<\TeX\ code>}
% This macros install the given \MacroArgs<\TeX\ code> in the `AtBegin' and `AtEnd' hooks of the given package file.
% The \Macro\AtBeginOfPackageFile simply executes \Macro\AtBeginOfFile{<package name>.sty}{<\TeX code>}.
% Special care is taken to ensure that the `AtEnd' code is executed \emph{after} any code installed by the package itself
% using the \LaTeX\ macro \Macro\AtEndOfPackage. Note that it is therefore executed after the `AtEndOfEveryFile' hook.
% If the starred version is used and the package is already loaded the code
% is executed right away.
%
% The following figure shows the positions of the hooks inside the macros:\par\medskip
% \centerline{\hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\usepackage/\Macro\RequirePackage/\Macro\RequirePackageWithOptions:}%
%   \hbox{\fbox{\vbox{%
%    \hbox{\fbox{\DrawInputIf{\hbox{ (includes AtBeginOfPackageFile\MacroArgs{<file name>})}}}}%
%    \vspace{2pt}%
%    \hbox{\Hook{AtEndOfPackage}~~(\LaTeX\ hook)}%
%    \hbox{\Hook{AtEndOfPackageFile}{<file name>}}%
%   }}}%
% }}}
%
% \subsection*{Class Files}
%
% \DescribeMacro{\AtBeginOfClassFile}*{<class name>}{<\TeX\ code>}
% \DescribeMacro{\AtEndOfClassFile}*{<class name>}{<\TeX\ code>}
% This macros install the given \MacroArgs<\TeX\ code> in the `AtBegin' and `AtEnd' hooks of the given class file.
% They work with classes loaded using \Macro\LoadClass, \Macro\LoadClassWithOptions and also \Macro\documentclass.
% However, in the latter case |filehook| must be loaded using \Macro\RequirePackage beforehand.
% The macro \Macro\AtBeginOfClassFile simply executes \Macro\AtBeginOfFile{<class name>.cls}{\ldots}.
% Special care is taken to ensure that the `AtEnd' code is executed \emph{after} any code installed by the class itself
% using the \LaTeX\ macro \Macro\AtEndOfClass.
% Note that it is therefore executed after the `AtEndOfEveryFile' hook.
% If the starred version is used and the class is already loaded the code
% is executed right away.
%
% The following figure shows the positions of the hooks inside the macros:\par\medskip
% \centerline{\hbox{\vbox{%
%   \sffamily
%   \hbox{\Macro\documentclass/\Macro\LoadClass/\Macro\LoadClassWithOptions:}%
%   \hbox{\fbox{\vbox{%
%    \hbox{\fbox{\DrawInputIf{\hbox{ (includes AtBeginOfClassFile\MacroArgs{<file name>})}}}}%
%    \vspace{2pt}%
%    \hbox{\Hook{AtEndOfClass}~~(\LaTeX\ hook)}%
%    \hbox{\Hook{AtEndOfClassFile}{<file name>}}%
%   }}}%
% }}}
%
% \subsection{Clearing Hooks}
% \DescribeMacro\ClearHook\AlsoMacro{At...Of...}<argument(s) of hook macro>
% Using\marginpar{New in v0.5 2011/01/09} this macro existing hooks can be globally cleared, i.e.\ set to empty.
% This should be used with care because it will also remove all (user level) hook code set
% by packages into this hook.
% Note that the special hook code installed by the packages \pkg{currfile} and \pkg{svn-multi}
% as well as the compatibility code described in section~\ref{sec:comp} is not affected.
% The syntax for this macro is the same as for the normal hook macros only with a leading \Macro\ClearHook,
% where the \meta{code} argument is mandatory but its content is ignored.
% Examples:\\
% \hspace*{\bigskipamount}\Macro\ClearHook\AlsoMacro\AtBeginOfInputFile{<file name>}{<ignored>}\\
% \hspace*{\bigskipamount}\Macro\ClearHook\AlsoMacro\AtBeginOfFiles{<ignored>}
%
%
%
% \clearpage
% \section{PGF Key Interface}
% An auxiliary package |pgf-filehook| is provided which adds support for the versatile \pkg{pgfkeys} interface.
% This interface is heavily used by \pkg{pgf} (portable graphics format) and its higher level format Ti\textit{k}Z.
% It allows the definition and execution of styles and commands (macros) using a \MacroArgs<key>'='<value> format.
% Main benefits over similar formats is the support for a ``directory structure'' inside the key and the ability
% to call functions on the value before it gets processed by the key. The main way to define and execute keys 
% is the macro \Macro\pgfkeys{<key>'='<value>',...'}. Ti\textit{k}Z provides the similar macro \Macro\tikzstyle
% which defaults to the main path `|/tikz|'.
% More detailed information can be found in the official |pgfmanual|.
%
% All |filehook| macros described in the previous section (\Macro{AtXXXOfYYY}) can also be accessed using the 
% pgf keys directory `|/filehook|', where all hook type have an own sub-directory (|/filehook/YYY|) in which
% the hooks for this type are located (|/filehook/YYY/AtXXX|).
% For example {\Macro\AtBeginOfInputs{<code>}} can also be 
% accessed using \\\hspace*{\parindent}\Macro\pgfkeys{'/filehook/Inputs/AtBegin='{<code>}}\\ or \Macro\AfterIncludeFile{<file name>}{<code>} as
% \\\hspace*{\parindent}{\Macro\pgfkeys{'/filehook/IncludeFile/After='{<file name>}{<code>}}}\\ as well as
% \Macro\AtEndOfClassFile*{<file name>}{<code>} as 
% \\\hspace*{\parindent}{\Macro\pgfkeys{'/filehook/ClassFile/AtEnd='*{<file name>}{<code>}}.}
%
% \DescribeMacro\pgffilehook{<key>'='<value>',...'}
% This macro is like \Macro\pgfkeys but defaults to the `|/filehook|' directory, so that it can be dropped from the 
% \meta{key}. Note that |pgfkeys| also supports to ``change the directory'' using \MacroArgs<directory>'/.cd', so that
% it does not need to be included in further keys. All directories are defined as `\textit{is family}' so that the |/.cd| is
% assumed if the directory is used on its own.
% For example\\\centerline{\Macro\pgfkeys{'/filehook/Inputs/AtBegin='{<code>}',/filehook/Inputs/AtEnd='{<code>}}}
% can be shorten as\\\centerline{\Macro\pgffilehook{'Inputs,AtBegin='{<code>}',AtEnd='{<code>}}.}
%
% \medskip
% Some of the pgf key functions can become useful, e.g.\ if the hook code should be expanded before it is added to the hook:\\
% \hspace*{\parindent}\Macro\pgffilehook{'EveryFile/AtBegin/.expand once='{\AlsoMacro\headertext\space\AlsoMacro\currfilename}}\\
% will expand the first macro \Macro\headertext\relax (actually the first token) in the hook code once (using \Macro\expandafter), but
% not any other tokens. In this example future changes of \Macro\headertext would not have any effect on the hook code, but 
% \Macro\currfilename will be expanded for every file.
% Other useful functions are `|.expand twice|' (expand the first token twice) and `|.expanded|' (expand the whole hook code using \Macro\edef).
%
% \clearpage
% \section{Compatibility Issues with Classes and other Packages}\label{sec:comp}
% The |filehook| package might clash with other packages or classes which also redefine \Macro\InputIfFileExists
% or internal macros used by \Macro\include and \Macro\input\relax (which are \Macro\@input@ and \Macro\@iinput).
% Special compatibility code is in place for the packages listed below (in their current implementation).
% If any other unknown definition of \Macro\InputIfFileExists is found an error will be raised.
% The package option `|force|' can be used to prevent this and to force the redefinition of this macro.
% Then any previous modifications will be lost, which will most likely break the other package.
% Table~\ref{tab:incomp} lists all packages and classes which where found do be incompatible.
% The packages \pkg{auxhook}, \pkg{stampinclude}, \pkg{rerunfilecheck} and \pkg{excludeonly} redefine
% one or more of the above macros but have been found compatible with |filehook|.
% Please do not hesitate to inform the author of |filehook| of any encountered problems with other packages.
%
% \subsection{Supported Classes and Packages}
% The following classes and packages are actively supported and should work as normal when used together with |filehook|.
% Please note that most of them are incompatible to each other, which |filehook| might not fix.
%
% \subsubsection*{memoir}
% The |memoir| class redefines \Macro\InputIfFileExists to add own hooks identical to the `At...OfFiles' hooks (there called \Macro\AtBeginFile and \Macro\AtEndFile).
% This hooks will be moved to the corresponding ones of |filehook| and will keep working as normal.
% Since v0.4 from 2011/01/03 this modification will be also applied when the |filehook| package is loaded (using \Macro\RequirePackage) \emph{before} the
% |memoir| class. However, the hooks from |filehook| need to be temporally disabled while reading the |memoir| class.
% They will not be triggered for all files read directly by this class, like configuration and patch files.
% Note that the `At...OfClassFile' hooks still work for the |memoir| class file itself. In fact they are used to restore the default definition of \Macro\InputIfFileExists
% at the begin and patch it at the end of the class file.
% The |filehook| package should be loaded either before the class (using \Macro\RequirePackage) or directly
% after it. Because the |memoir| hook code is moved to the |filehook| hooks this class should then be
% compatible with below packages if |memoir| and |filehook| are loaded before them.
%
%
% \subsubsection*{scrlfile}
% The |scrlfile| package from the \emph{koma-script} bundle redefines \Macro\InputIfFileExists to allow file name aliases and to also add hooks.
% If required it should be loaded before |filehook|, which will add its hooks correctly to the modified definition.
% Since v0.4 from 2011/01/03 this modification will be also applied when the |scrlfile| package is loaded after |filehook|.
%
%
% \subsubsection*{fink}
% The |filehook| and |currfile| packages where written as replacements for the |fink| package, where |filehook| provides the necessary hooks for |currfile|.
% The |fink| package has now been deprecated in favour of |currfile| and should not be used anymore. The |fink| compatibility code has been removed from |filehook|
% and both cannot be used successfully together as both redefine the \Macro\InputIfFileExists macro.
%
%
% \subsubsection*{listings}
% The \pkg{listings} package uses \Macro\input inside \Macro\lstinputlisting. Therefore the |InputFile|(|s|) and |File|(|s|) hooks are also triggered for these files.
% Please note that this hooks are executing inside a verbatim environment. While the code in the hook is not affected (because it was added outside the verbatim
% environment), any further code read using any input macro (\Macro\input, \Macro\@input, \Macro\@@input\relax (\TeX's \Macro\input), \ldots) will be processed verbatim and typeset
% as part of the listing. 
% Since v0.4 this macro is automatically patched so \Macro\@input is used instead to avoid this issue.
%
%
% \subsection{Other Classes and Packages}
%
% \subsubsection*{jmlrbook}
% The |jmlrbook| class from the |jmlr| bundle temporary redefines \Macro\InputIfFileExists to import papers.
% The `original' definition is saved away at load time of the package and is used internally by the new definition.
% This means that the hooks will not be active for this imported files because |filehook| is loaded after the class.
% This should not affect its normal usage.
% Note that, in theory, the package could be loaded before \Macro\documentclass using \Macro\RequirePackage to enable the file hooks also for these files.
%
% \subsubsection*{\LaTeX's \textbackslash bibliography}
% The standard \LaTeX\ macro \Macro\bibliography uses the same internal macro \Macro\@input@ to read a file
% as \Macro\include does.
% The `include' hooks will also be executed for this |.bbl| file if the macro is directly followed by \Macro\clearpage,
% because the |filehook| code will assume it is executed inside \Macro\include.
% This rare case can be easily avoided by placing a \Macro\relax after \Macro\bibliography{\ldots}.
%
%
% \begin{table}
%    \centering
%    \tablecaption{Incompatible packages and classes}
%    \label{tab:incomp}
%
%    \begin{tabular}{>{\ttfamily}llll}
%       \toprule
%       Name     & Type    &  Note                          &  Affected Hooks  \\
%       \midrule
%       paper    & class   &  with \texttt{journal} option  &  All hocks for \Macro\include\unskip'd files \\
%       journal  & class   &                                &  All hocks for \Macro\include\unskip'd files \\
%       gmparts  & package &                                &  \Macro\include hooks                        \\
%       newclude & package & formally \texttt{includex}     &  All hocks for \Macro\include\unskip'd files \\
%       \bottomrule
%    \end{tabular}
% \end{table}
%
% \section{Upgrade Guide}
% \label{sec:upgrade}
% This sections gives information for users of older versions of this package which unfortunately might not be 100\% backwards compatible.
%
% \subsection*{Upgrade to v0.4 - 2011/01/03}
% \begin{itemize}
%   \item The macro \Macro\AfterIncludeFile was misspelled as \Macro\AfterOfIncludeFile in the implementation of earlier versions, but not in the documentation.
%   This has now be corrected. Please adjust your code to use the correct name and to require the |filehook| package from 2011/01/03.
%   \item All general hooks (the one not taking a file argument) used to have an implicit argument |#1| which was expanded to the file name (i.e.\ the argument of \Macro\input etc.).
%    This has now be changed, so that macro arguments are not handled special in hook code, which e.g.\ simplifies macro definitions.
%    Older hook code might need to change |##| to |#| to compensate for this change.
%    If the file name is required the macros (e.g.\ \Macro\currfilename) of the partner package \pkg{currfile} should be used.
%    These macros are available everywhere including in all hocks.
% \end{itemize}
%
% \StopEventually{}
% \clearpage
% \section{Implementation}\label{sec:impl}
%
% \iffalse
%<@filehook.sty>
% \fi
%
% \iffalse
%<@filehook-memoir.sty>
% \fi
%
% \iffalse
%<@filehook-listings.sty>
% \fi
%
% \iffalse
%<@filehook-scrlfile.sty>
% \fi
%
% \iffalse
%<@filehook-fink.sty>
% \fi
%
% \iffalse
%<@pgf-filehook.sty>
% \fi
%
% \Finale
\endinput
